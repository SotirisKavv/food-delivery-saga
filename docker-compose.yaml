services:
  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT
      - ZOOKEEPER_TICK_TIME
    env_file:
      - .env
    networks:
      - order-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID
      - KAFKA_ZOOKEEPER_CONNECT
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
      - KAFKA_ADVERTISED_LISTENERS
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE
      - KAFKA_NUM_PARTITIONS
      - KAFKA_DEFAULT_REPLICATION_FACTOR
    env_file:
      - .env
    networks:
      - order-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Kafka Topic Setup
  kafka-setup:
    build:
      context: deployments/kafka
      dockerfile: Dockerfile
    container_name: kafka-setup
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER
      - MAX_WAIT
    env_file:
      - .env
    networks:
      - order-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
      - kafka-setup
    ports:
      - "8090:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
      - KAFKA_CLUSTERS_0_ZOOKEEPER
    env_file:
      - .env
    networks:
      - order-network

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: deployments/api/Dockerfile
    container_name: api-gateway
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    environment:
      - API_GATEWAY_PORT
      - KAFKA_BROKERS
    env_file:
      - .env
    networks:
      - order-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Inventory Service
  inventory-svc:
    build:
      context: .
      dockerfile: deployments/inventory/Dockerfile
    container_name: inventory-svc
    depends_on:
      kafka:
        condition: service_healthy
      kafka-setup:
        condition: service_completed_successfully
    environment:
      - KAFKA_BROKERS
    env_file:
      - .env
    networks:
      - order-network

networks:
  order-network:
    name: order-network
    driver: bridge